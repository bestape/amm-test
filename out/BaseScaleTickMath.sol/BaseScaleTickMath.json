{"abi":[],"bytecode":{"object":"0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201a643de7bfae7ccec7aee2c02a4ee4fa51c250350ba1b773d05eca1981c1c66d64736f6c63430007060033","sourceMap":"595:9176:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201a643de7bfae7ccec7aee2c02a4ee4fa51c250350ba1b773d05eca1981c1c66d64736f6c63430007060033","sourceMap":"595:9176:20:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"},\"a\":{\"details\":\"The Pythagorean triple values used to derive d, where a^2 + b^2 = c^2\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This library is a demonstration of how Uniswap's TickMath can be expressed using Base Scale Calculus, where a^2 + b^2 = c^2 and d = (c - b) / a. The price is related to the tick by the formula price = (1/d)^tick. For compatibility with Uniswap, we set d = 1 / 1.0001. This computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/BaseScaleTickMath.sol\":\"BaseScaleTickMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":v3-core/=lib/v3-core/\"]},\"sources\":{\"src/BaseScaleTickMath.sol\":{\"keccak256\":\"0x3f20f776434c81e79ca4305a20265d7a1c54ca25911549406d27b27ea0fffe07\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ec80bb156f40ce42e9696a2c5868262d6cf71752793076949a2c954e4e917f8a\",\"dweb:/ipfs/QmezpDcgCMicnjUmFD9F1bwjZzLj9WZCLox54VGSS4G6pA\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.7.6+commit.7338295f"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","v3-core/=lib/v3-core/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/BaseScaleTickMath.sol":"BaseScaleTickMath"},"evmVersion":"istanbul","libraries":{}},"sources":{"src/BaseScaleTickMath.sol":{"keccak256":"0x3f20f776434c81e79ca4305a20265d7a1c54ca25911549406d27b27ea0fffe07","urls":["bzz-raw://ec80bb156f40ce42e9696a2c5868262d6cf71752793076949a2c954e4e917f8a","dweb:/ipfs/QmezpDcgCMicnjUmFD9F1bwjZzLj9WZCLox54VGSS4G6pA"],"license":"GPL-2.0-or-later"}},"version":1},"id":20}